/*
 * This file is generated by jOOQ.
 */
package io.github.dndanoff.door.db.tables;


import io.github.dndanoff.door.db.DoorMonitor;
import io.github.dndanoff.door.db.Indexes;
import io.github.dndanoff.door.db.Keys;
import io.github.dndanoff.door.db.tables.records.DoorReadingRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.12"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DoorReading extends TableImpl<DoorReadingRecord> {

    private static final long serialVersionUID = 664730002;

    /**
     * The reference instance of <code>door_monitor.DOOR_READING</code>
     */
    public static final DoorReading DOOR_READING = new DoorReading();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DoorReadingRecord> getRecordType() {
        return DoorReadingRecord.class;
    }

    /**
     * The column <code>door_monitor.DOOR_READING.ID</code>.
     */
    public final TableField<DoorReadingRecord, String> ID = createField("ID", org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>door_monitor.DOOR_READING.VALUE</code>.
     */
    public final TableField<DoorReadingRecord, Byte> VALUE = createField("VALUE", org.jooq.impl.SQLDataType.TINYINT.nullable(false), this, "");

    /**
     * The column <code>door_monitor.DOOR_READING.CREATE_TIME</code>.
     */
    public final TableField<DoorReadingRecord, LocalDateTime> CREATE_TIME = createField("CREATE_TIME", org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>door_monitor.DOOR_READING.PROCESSED</code>.
     */
    public final TableField<DoorReadingRecord, Byte> PROCESSED = createField("PROCESSED", org.jooq.impl.SQLDataType.TINYINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.TINYINT)), this, "");

    /**
     * The column <code>door_monitor.DOOR_READING.DOOR_NAME</code>.
     */
    public final TableField<DoorReadingRecord, String> DOOR_NAME = createField("DOOR_NAME", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>door_monitor.DOOR_READING.LAST_UPDATED</code>.
     */
    public final TableField<DoorReadingRecord, LocalDateTime> LAST_UPDATED = createField("LAST_UPDATED", org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "");

    /**
     * Create a <code>door_monitor.DOOR_READING</code> table reference
     */
    public DoorReading() {
        this(DSL.name("DOOR_READING"), null);
    }

    /**
     * Create an aliased <code>door_monitor.DOOR_READING</code> table reference
     */
    public DoorReading(String alias) {
        this(DSL.name(alias), DOOR_READING);
    }

    /**
     * Create an aliased <code>door_monitor.DOOR_READING</code> table reference
     */
    public DoorReading(Name alias) {
        this(alias, DOOR_READING);
    }

    private DoorReading(Name alias, Table<DoorReadingRecord> aliased) {
        this(alias, aliased, null);
    }

    private DoorReading(Name alias, Table<DoorReadingRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> DoorReading(Table<O> child, ForeignKey<O, DoorReadingRecord> key) {
        super(child, key, DOOR_READING);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DoorMonitor.DOOR_MONITOR;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.CONSTRAINT_INDEX_D, Indexes.DOOR_READING_CREATE_TIME_INDX, Indexes.DOOR_READING_RPOCESSED_INDX, Indexes.PRIMARY_KEY_D);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<DoorReadingRecord> getPrimaryKey() {
        return Keys.DOOR_READING_PK;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<DoorReadingRecord>> getKeys() {
        return Arrays.<UniqueKey<DoorReadingRecord>>asList(Keys.DOOR_READING_PK, Keys.CONSTRAINT_D);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DoorReading as(String alias) {
        return new DoorReading(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DoorReading as(Name alias) {
        return new DoorReading(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public DoorReading rename(String name) {
        return new DoorReading(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public DoorReading rename(Name name) {
        return new DoorReading(name, null);
    }
}
