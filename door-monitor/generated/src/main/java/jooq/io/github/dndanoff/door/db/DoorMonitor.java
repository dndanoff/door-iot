/*
 * This file is generated by jOOQ.
 */
package io.github.dndanoff.door.db;


import io.github.dndanoff.door.db.tables.Door;
import io.github.dndanoff.door.db.tables.DoorReading;
import io.github.dndanoff.door.db.tables.DoorStateTransition;
import io.github.dndanoff.door.db.tables.FlywaySchemaHistory;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Catalog;
import org.jooq.Table;
import org.jooq.impl.SchemaImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.12"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DoorMonitor extends SchemaImpl {

    private static final long serialVersionUID = -160503783;

    /**
     * The reference instance of <code>door_monitor</code>
     */
    public static final DoorMonitor DOOR_MONITOR = new DoorMonitor();

    /**
     * The table <code>door_monitor.DOOR</code>.
     */
    public final Door DOOR = io.github.dndanoff.door.db.tables.Door.DOOR;

    /**
     * The table <code>door_monitor.DOOR_READING</code>.
     */
    public final DoorReading DOOR_READING = io.github.dndanoff.door.db.tables.DoorReading.DOOR_READING;

    /**
     * The table <code>door_monitor.DOOR_STATE_TRANSITION</code>.
     */
    public final DoorStateTransition DOOR_STATE_TRANSITION = io.github.dndanoff.door.db.tables.DoorStateTransition.DOOR_STATE_TRANSITION;

    /**
     * The table <code>door_monitor.flyway_schema_history</code>.
     */
    public final FlywaySchemaHistory FLYWAY_SCHEMA_HISTORY = io.github.dndanoff.door.db.tables.FlywaySchemaHistory.FLYWAY_SCHEMA_HISTORY;

    /**
     * No further instances allowed
     */
    private DoorMonitor() {
        super("door_monitor", null);
    }


    /**
     * {@inheritDoc}
     */
    @Override
    public Catalog getCatalog() {
        return DefaultCatalog.DEFAULT_CATALOG;
    }

    @Override
    public final List<Table<?>> getTables() {
        List result = new ArrayList();
        result.addAll(getTables0());
        return result;
    }

    private final List<Table<?>> getTables0() {
        return Arrays.<Table<?>>asList(
            Door.DOOR,
            DoorReading.DOOR_READING,
            DoorStateTransition.DOOR_STATE_TRANSITION,
            FlywaySchemaHistory.FLYWAY_SCHEMA_HISTORY);
    }
}
